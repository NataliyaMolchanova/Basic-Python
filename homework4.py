# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения
# расчета для конкретных значений необходимо запускать скрипт с параметрами.

# from sys import argv
#
# script_name, productivity, rate_per_hour, bonus = argv
# print('Скрипт расчета заработной платы: ', script_name)
# print('Трудозатраты, часы: ', productivity)
# print('Себестоимость часа, руб.: ', rate_per_hour)
# print('Премия: ', bonus)
# print('Итого: ', int(productivity) * int(rate_per_hour) + int(bonus))

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка
# использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
#
# def generator():
#     list = [56, 242, 2, 87, 4, 66, 33, 7, 2]
#     print(f'Первый список {list}')
#
#     result_list = [list[index] for index in range(1, len(list)) if list[index] > list[index-1]]
#     print(f'Итоговый список {result_list}')
#
# if __name__ == "__main":
#     generator()


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

# result = print([i for i in range(20, 241) if not i % 20 or not i % 21])


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый
# массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# from random import randint
#
# list = [randint(0, 100) for i in range(10)]
# print(f'Исходный список {list}')
#
# result = [el for el in list if list.count(el) == 1]
# print(f'Неповторяющиеся числа {result}')

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны
# войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения
# всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

items = [el for el in range(100, 1001, 2)]

result = reduce(lambda x, y: x*y, items)
print(result)

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл
# не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

# from itertools import cycle

start_from = 10
iterable = "ABCDEF"
iterations_count = 0

# def integer_generator(start_from):
#     for el in count(start_from):
#         if el > start_from+10:
#             break
#         yield el

for el in cycle(iterable):
    if el == iterable[0]:
        iterations_count += 1
    if iterations_count <3:
        print(el)
    else:
        break

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим 
# образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить 
# только первые n чисел, начиная с 1! и до n!.

from functools import reduce
from itertools import count

def fact(n):
    for i in count(1):
        if i <= n:
            result = reduce(lambda x, y: x*y, range(1, i+1))
            yield result
        else:
            break

for el in fact(10):
    print(el)
